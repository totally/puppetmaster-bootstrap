#!/bin/bash

PATH='/bin:/sbin:/usr/bin:/usr/sbin'

APT_OPTS='-q -q -y'
POSTGRESQL_VERSION='9.1'
PUPPET_REPO='http://apt.puppetlabs.com/'
DISTRIB_CODENAME=`awk -F= '/^DISTRIB_CODENAME/ { print $2 }' /etc/lsb-release`

# Make apt-get install really quiet.
export DEBIAN_FRONTEND=noninteractive

if [ "`/usr/bin/id -u`" != "0" ]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

function add_puppet_repository()
{
  echo "deb ${PUPPET_REPO} ${DISTRIB_CODENAME} main dependencies" > /etc/apt/sources.list.d/puppet.list
  curl --silent ${PUPPET_REPO}/pubkey.gpg | apt-key add - > /dev/null
  apt-get ${APT_OPTS} update
}

function install_postgresql()
{
  apt-get ${APT_OPTS} update
  apt-get ${APT_OPTS} install postgresql-${POSTGRESQL_VERSION} libpq-dev >/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing PostgreSQL."
    exit 1
  fi

  cat > /etc/postgresql/${POSTGRESQL_VERSION}/main/pg_hba.conf << EOF
# PostgreSQL Client Authentication Configuration File
# ===================================================
#
# Database administrative login by Unix domain socket
# Do not disable!
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   puppet          puppet                                  md5
local   all             all                                     peer
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
EOF
  sudo -u postgres -i createdb puppet
  sudo -u postgres -i createuser -D -R -S puppet
  sudo -u postgres -i psql template1 -c"ALTER USER puppet WITH PASSWORD 'puppet';" >/dev/null
  sudo -u postgres -i psql template1 -c'GRANT CREATE ON DATABASE puppet to puppet' >/dev/null
}

function install_rubygems()
{
  apt-get ${APT_OPTS} update
  apt-get ${APT_OPTS} install rubygems1.8 >/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing rubygems."
    exit 1
  fi

  gem install activerecord --quiet --no-rdoc --no-ri --version 3.0.11 >/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing rubygem: activerecord."
    exit 1
  fi

  gem install pg --no-rdoc --quiet --no-ri >/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing rubygem: pg"
    exit 1
  fi

  gem install rack --no-rdoc --quiet --no-ri >/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing rubygem: rack"
    exit 1
  fi

  gem install unicorn --no-rdoc --quiet --no-ri >/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing rubygem: unicorn"
    exit 1
  fi
}

function install_puppetmaster()
{
  apt-get ${APT_OPTS} update
  apt-get ${APT_OPTS} install puppet puppetmaster >/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing Puppetmaster."
    exit 1
  fi

  /etc/init.d/puppetmaster stop>/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with stopping Puppetmaster."
    exit 1
  fi

  cat > /etc/puppet/puppet.conf << EOF
[agent]
  report      = true
  show_diff   = true
  environment = production
[main]
  server      = puppet
  environment = production
  confdir     = /etc/puppet
  logdir      = /var/log/puppet
  vardir      = /var/lib/puppet
  ssldir      = /var/lib/puppet/ssl
  rundir      = /var/run/puppet
  factpath    = \$vardir/lib/facter
  templatedir = \$confdir/templates
[master]
  environment  = production
  manifest     = \$confdir/environments/\$environment/manifests/site.pp
  modulepath   = \$confdir/environments/\$environment/modules
  storeconfigs = true
  dbadapter    = postgresql
  dbuser       = puppet
  dbpassword   = puppet
  dbserver     = localhost
  dbname       = puppet
EOF

  cat > /etc/default/puppetmaster << EOF
# Defaults for puppetmaster - sourced by /etc/init.d/puppetmaster

START=no
DAEMON_OPTS=""
EOF

  cat > /etc/puppet/unicorn.conf << EOF
worker_processes 8
working_directory "/etc/puppet"
listen '/var/run/puppet/puppetmaster_unicorn.sock', :backlog => 512
timeout 120
pid "/var/run/puppet/puppetmaster_unicorn.pid"
stderr_path "/var/log/puppet/puppetmaster_unicorn.stderr.log"
stdout_path "/var/log/puppet/puppetmaster_unicorn.stdout.log"

preload_app true
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

before_fork do |server, worker|
  old_pid = "#{server.config[:pid]}.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end
EOF

  cp /usr/share/puppet/ext/rack/files/config.ru /etc/puppet/
  /usr/local/bin/unicorn --env production --daemonize --config-file /etc/puppet/unicorn.conf
}

function install_nginx()
{
  apt-get ${APT_OPTS} update
  apt-get ${APT_OPTS} install nginx-light>/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with installing nginx."
    exit 1
  fi

  cat > /etc/nginx/nginx.conf << EOF
user www-data;
worker_processes 4;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;

  sendfile on;
  server_names_hash_bucket_size 64;
  client_max_body_size 128M;
  types_hash_max_size 1024;
  types_hash_bucket_size 64;
  port_in_redirect off;
  keepalive_timeout 64;
  tcp_nodelay on;
  server_tokens off;

  gzip on;
  gzip_http_version 1.1;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_proxied any;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_buffers 16 8k;
  gzip_disable “MSIE [1-6].(?!.*SV1)”;

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*.conf;

  server {
    listen 127.0.0.1:8200;
      location /server-status {
      access_log off;
      allow 127.0.0.1;
      deny all;
      stub_status on;
    }
  }
}
EOF

  cat > /etc/nginx/sites-available/puppetmaster.conf << EOF
upstream puppetmaster_unicorn {
  server unix:/var/run/puppet/puppetmaster_unicorn.sock fail_timeout=0;
}

server {
  listen 8140 ssl;

  location /probe {
    empty_gif;
  }

  ssl_session_timeout 5m;
  ssl_certificate /var/lib/puppet/ssl/certs/$(hostname --fqdn).pem;
  ssl_certificate_key /var/lib/puppet/ssl/private_keys/$(hostname --fqdn).pem;
  ssl_client_certificate /var/lib/puppet/ssl/ca/ca_crt.pem;
  ssl_ciphers SSLv2:-LOW:-EXPORT:RC4+RSA;
  ssl_verify_client optional;

  root /usr/share/nginx/www;

  proxy_set_header Host \$host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header X-Client-Verify \$ssl_client_verify;
  proxy_set_header X-Client-DN \$ssl_client_s_dn;
  proxy_set_header X-SSL-Issuer \$ssl_client_i_dn;
  proxy_read_timeout 120;

  location / {
    proxy_pass http://puppetmaster_unicorn;
    proxy_redirect off;
  }

  access_log /var/log/nginx/puppetmaster-access.log;
  error_log /var/log/nginx/puppetmaster-error.log;
}
EOF

  ln -s /etc/nginx/sites-available/puppetmaster.conf /etc/nginx/sites-enabled/
  rm -f /etc/nginx/sites-enabled/default

  /etc/init.d/nginx start>/dev/null 2>&1
  if [ ${?} -ne 0 ]; then
    echo "Something went wrong with starting nginx."
    exit 1
  fi
}

add_puppet_repository
install_postgresql
install_rubygems
install_puppetmaster
install_nginx
